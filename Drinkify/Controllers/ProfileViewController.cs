// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.IO;
using Drinkify.Helper;
using Foundation;
using Photos;
using UIKit;
using Xamarin.Cognitive.Face;
using Xamarin.Cognitive.Face.Model;

namespace Drinkify.Storyboards
{
    public partial class ProfileViewController : UIViewController
    {
        Stream imgn;
        List<Face> detectedFaces;

        public ProfileViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            imProfile.Image = UIImage.FromBundle("profileTest");

            txtUser.Text = DataPersistanceClass.persona.Email;
            txtName.Text = DataPersistanceClass.persona.Name;

            btnBack.Clicked += delegate {
                DismissViewController(true, null);
            };

            btnRenew.TouchUpInside += delegate
            {
                showActionSheet();
            };




        }

        async System.Threading.Tasks.Task ValidarImagenAsync()
        {
            //UIImage im = new UIImage();
            //Stream asd = im.
            FaceClient.Shared.Endpoint = Endpoints.WestCentralUS;
            FaceClient.Shared.SubscriptionKey = "46741c03a7b848d9879f3b968080ab71";
            try
            {
                detectedFaces = await FaceClient.Shared.DetectFacesInPhoto(imgn, true, FaceAttributeType.Age, FaceAttributeType.Gender);
            }
            catch (ErrorDetailException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            //var faceServiceClient = new FaceServiceClient("{FACE_API_SUBSCRIPTION_KEY}");
        }

        void showActionSheet()
        {

            var alert = UIAlertController.Create(null, null, UIAlertControllerStyle.ActionSheet);
            alert.AddAction(UIAlertAction.Create("Libreria", UIAlertActionStyle.Default, TryOpenPhotolibrary));
            alert.AddAction(UIAlertAction.Create("Cancelar", UIAlertActionStyle.Cancel, null));
            PresentViewController(alert, true, null);
        }

        void TryOpenPhotolibrary(UIAlertAction obj)
        {
            if (!UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.PhotoLibrary))
            {
                return;
            }
            CheckPhotoLibraryAuthorizationStatus(PHPhotoLibrary.AuthorizationStatus);
        }

        void CheckPhotoLibraryAuthorizationStatus(PHAuthorizationStatus authorizationStatus)
        {
            switch (authorizationStatus)
            {
                case PHAuthorizationStatus.NotDetermined:
                    // Vamos a pedir permiso para acceder a la galeria
                    //InvokeOnMainThread(() => {
                    PHPhotoLibrary.RequestAuthorization(CheckPhotoLibraryAuthorizationStatus);
                    //});

                    break;
                case PHAuthorizationStatus.Restricted:
                    InvokeOnMainThread(() => {
                        showMessage("No disponible", "El recurso no esta disponible, esta restringido", NavigationController);
                    });

                    //Mostrar mensaje de restringido
                    break;
                case PHAuthorizationStatus.Denied:
                    InvokeOnMainThread(() => {
                        showMessage("No disponible", "El recurso no esta disponible, esta denegado por ti", NavigationController);
                    });
                    //Mostrar un mensaje diciendo que el usuario denego 
                    break;
                case PHAuthorizationStatus.Authorized:
                    InvokeOnMainThread(() => {
                        var imagePickerController = new UIImagePickerController
                        {
                            SourceType = UIImagePickerControllerSourceType.PhotoLibrary,
                            Delegate = this
                        };
                        PresentViewController(imagePickerController, true, null);
                    });
                    break;
                default:
                    break;
            }
        }

        void showMessage(string title, string message, UIViewController fromViewController)
        {
            var alert = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert);
            alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
            fromViewController.PresentViewController(alert, true, null);
        }

        [Export("imagePickerController:didFinishPickingMediaWithInfo:")]
        public void FinishedPickingMedia(UIImagePickerController picker, NSDictionary info)
        {
            var image = info[UIImagePickerController.OriginalImage] as UIImage;
            imProfile.Image = image;
            var jpeg = image.AsJPEG();
            imgn = jpeg.AsStream();
            var esperar = ValidarImagenAsync();
            picker.DismissViewController(true, null);
        }

        [Export("imagePickerControllerDidCancel:")]
        public void Canceled(UIImagePickerController picker)
        {
            picker.DismissViewController(true, null);
        }




    }
}
