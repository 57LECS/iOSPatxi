// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using Drinkify.Helper;
using Firebase.Storage;
using Foundation;
using Photos;
using UIKit;
using Xamarin.Cognitive.Face;
using Xamarin.Cognitive.Face.Model;

namespace Drinkify.Storyboards
{
    public partial class ProfileViewController : UIViewController
    {
        Stream imgn;
        List<Face> detectedFaces;
        StorageReference rootRefStorage;

        public ProfileViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            imProfile.Image = UIImage.FromBundle("profileTest");
            rootRefStorage = Storage.DefaultInstance.GetRootReference();
            txtUser.Text = DataPersistanceClass.persona.Email;
            txtName.Text = DataPersistanceClass.persona.Name;

            btnBack.Clicked += delegate {
                DismissViewController(true, null);
            };

            btnRenew.TouchUpInside += delegate
            {
                showActionSheet();
            };
            GetImageFromUser();




        }

        async System.Threading.Tasks.Task ValidarImagenAsync()
        {
            //UIImage im = new UIImage();
            //Stream asd = im.
            FaceClient.Shared.Endpoint = Endpoints.WestCentralUS;
            FaceClient.Shared.SubscriptionKey = "46741c03a7b848d9879f3b968080ab71";
            try
            {
                detectedFaces = await FaceClient.Shared.DetectFacesInPhoto(imgn, true, FaceAttributeType.Age, FaceAttributeType.Gender);
                if (detectedFaces.Count > 1)
                    showMessage("Más de una persona", "Porfavor Sube una foto donde solo aparezcas tú", this);
                else if(detectedFaces.Count<1)
                    showMessage("No hay nadie!", "Porfavor Sube una foto donde sea más visible tu cara", this);
                else{
                    var detectedFace = detectedFaces[0];
                    var edad = detectedFace.Attributes.Age;
                    var gender = detectedFace.Attributes.Gender;
                    if(edad>=18){
                        var alertController = UIAlertController.Create("Mayor de edad", $"Detectamos que tienes al rededor de {edad} años", UIAlertControllerStyle.ActionSheet);
                        //var alert = UIAlertController.Create(null, null, UIAlertControllerStyle.ActionSheet);
                        alertController.AddAction(UIAlertAction.Create("Es correcta", UIAlertActionStyle.Default, UpdateSesion));
                        alertController.AddAction(UIAlertAction.Create("Es incorrecta pero soy mayor de edad", UIAlertActionStyle.Default, TryOpenPhotolibrary));
                        alertController.AddAction(UIAlertAction.Create("Cancelar", UIAlertActionStyle.Cancel, null));
                        PresentViewController(alertController, true, null);
                    }
                    else{
                        var alertController = UIAlertController.Create("Menor de edad", $"Detectamos que tienes al rededor de {edad} años", UIAlertControllerStyle.ActionSheet);
                        //var alert = UIAlertController.Create(null, null, UIAlertControllerStyle.ActionSheet);
                        alertController.AddAction(UIAlertAction.Create("Es correcta y no puedo comprar alcohol", UIAlertActionStyle.Default, TryOpenPhotolibrary));
                        alertController.AddAction(UIAlertAction.Create("Es incorrecta subire otra foto", UIAlertActionStyle.Default, TryOpenPhotolibrary));
                        alertController.AddAction(UIAlertAction.Create("Cancelar", UIAlertActionStyle.Cancel, null));
                        PresentViewController(alertController, true, null);
                    }
                       
                }
            }
            catch (ErrorDetailException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            //var faceServiceClient = new FaceServiceClient("{FACE_API_SUBSCRIPTION_KEY}");
        }

        private void UpdateSesion(UIAlertAction obj)
        {
            txtTimeRemaining.Text = "12:00:00";
            AddImage(imProfile.Image);
        }


        public void AddImage(UIImage image)
        {
            var profileImageRef = rootRefStorage.GetChild($"/users/{DataPersistanceClass.persona.Id}.jpg");

            var imageMetadata = new StorageMetadata
            {
                ContentType = "image/jpeg"
            };

            image = ResizeImage(image, 170, 170);

            profileImageRef.PutData(image.AsJPEG(), imageMetadata, (metadata, error) =>
            {
                if (error != null)
                {
                    Console.WriteLine("Error");
                }
            });
        }

        public UIImage ResizeImage(UIImage sourceImage, float width, float height)
        {
            UIGraphics.BeginImageContext(new SizeF(width, height));
            sourceImage.Draw(new RectangleF(0, 0, width, height));
            var resultImage = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();
            return resultImage;
        }

        public void GetImageFromUser()
        {
            StorageReference profileImageRef = rootRefStorage.GetChild($"/users/{DataPersistanceClass.persona.Id}.jpg");
            UIImage img = new UIImage();
            var ss = profileImageRef.GetData(1 * 1024 * 1024, (data, error) => {
                try
                {
                    imProfile.Image = UIImage.LoadFromData(data);
                }
                catch (ArgumentNullException ex)
                {
                    //no tiene imagen
                    Console.WriteLine(ex.Message);
                    StorageReference genericImageRef = rootRefStorage.GetChild($"/users/-LFMk0i9sdCo5P6ptFYC.jpg");
                    genericImageRef.GetData(1 * 1024 * 1024, (dataa, errorr) => {

                        imProfile.Image = UIImage.LoadFromData(dataa);
                    });

                }

            });


        }

        void showActionSheet()
        {

            var alert = UIAlertController.Create(null, null, UIAlertControllerStyle.ActionSheet);
            alert.AddAction(UIAlertAction.Create("Libreria", UIAlertActionStyle.Default, TryOpenPhotolibrary));
            alert.AddAction(UIAlertAction.Create("Cancelar", UIAlertActionStyle.Cancel, null));
            PresentViewController(alert, true, null);
        }

        void TryOpenPhotolibrary(UIAlertAction obj)
        {
            if (!UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.PhotoLibrary))
            {
                return;
            }
            CheckPhotoLibraryAuthorizationStatus(PHPhotoLibrary.AuthorizationStatus);
        }

        void CheckPhotoLibraryAuthorizationStatus(PHAuthorizationStatus authorizationStatus)
        {
            switch (authorizationStatus)
            {
                case PHAuthorizationStatus.NotDetermined:
                    // Vamos a pedir permiso para acceder a la galeria
                    //InvokeOnMainThread(() => {
                    PHPhotoLibrary.RequestAuthorization(CheckPhotoLibraryAuthorizationStatus);
                    //});

                    break;
                case PHAuthorizationStatus.Restricted:
                    InvokeOnMainThread(() => {
                        showMessage("No disponible", "El recurso no esta disponible, esta restringido", NavigationController);
                    });

                    //Mostrar mensaje de restringido
                    break;
                case PHAuthorizationStatus.Denied:
                    InvokeOnMainThread(() => {
                        showMessage("No disponible", "El recurso no esta disponible, esta denegado por ti", NavigationController);
                    });
                    //Mostrar un mensaje diciendo que el usuario denego 
                    break;
                case PHAuthorizationStatus.Authorized:
                    InvokeOnMainThread(() => {
                        var imagePickerController = new UIImagePickerController
                        {
                            SourceType = UIImagePickerControllerSourceType.PhotoLibrary,
                            Delegate = this
                        };
                        PresentViewController(imagePickerController, true, null);
                    });
                    break;
                default:
                    break;
            }
        }

        void showMessage(string title, string message, UIViewController fromViewController)
        {
            var alert = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert);
            alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
            fromViewController.PresentViewController(alert, true, null);
        }

        [Export("imagePickerController:didFinishPickingMediaWithInfo:")]
        public void FinishedPickingMedia(UIImagePickerController picker, NSDictionary info)
        {
            var image = info[UIImagePickerController.OriginalImage] as UIImage;
            imProfile.Image = image;
            var jpeg = image.AsJPEG();
            imgn = jpeg.AsStream();
            var esperar = ValidarImagenAsync();
            picker.DismissViewController(true, null);
        }

        [Export("imagePickerControllerDidCancel:")]
        public void Canceled(UIImagePickerController picker)
        {
            picker.DismissViewController(true, null);
        }




    }
}
