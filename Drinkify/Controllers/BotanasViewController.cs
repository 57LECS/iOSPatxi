// This file has been autogenerated from a class added in the UI designer.

using System;
using Firebase.Database;
using Foundation;
using Patxi.Models;
using UIKit;

namespace Drinkify.Storyboards
{
    public partial class BotanasViewController : UIViewController, IUICollectionViewDataSource, IUICollectionViewDelegate, IUICollectionViewDelegateFlowLayout
	{
        NSDictionary botanasDic;
		public BotanasViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            collectionView.Delegate = this;
            collectionView.DataSource = this;

            DatabaseReference rootNode = Database.DefaultInstance.GetRootReference();
            //nuint quantity;
            DatabaseReference bebidas = rootNode.GetChild("0").GetChild("Productos").GetChild("Botanas");
            bebidas.ObserveSingleEvent(DataEventType.Value, (snapshot) => {
                if (!snapshot.Exists)
                    return;

                botanasDic = snapshot.GetValue<NSDictionary>();
                collectionView.ReloadData();

            }, (error) => {
                Console.WriteLine(error.LocalizedDescription);
            });
        }
        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {

            if (segue.Identifier.Equals("detalleBotanasSegue") == true)
            {

                var vc = segue.DestinationViewController as DetalleViewController;
                vc.isOrders = false;
                vc.isBebidas = false;
                vc.isBotanas = true;
                var btn = sender as UIButton;
                NSObject objectOut;
                botanasDic.TryGetValue(NSObject.FromObject(btn.CurrentTitle), out objectOut);
                var dasd = objectOut as NSDictionary;
                vc.diccionary = dasd ?? botanasDic;
            }

        }

        public nint GetItemsCount(UICollectionView collectionView, nint section)
        {
            try
            {
                return botanasDic.Keys.Length;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return 4;
            }
        }

        public UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath)
        {
            var cell = collectionView.DequeueReusableCell(CollectionBotanaViewCell.Key, indexPath) as CollectionBotanaViewCell;


            var title = (Botanas)(int)indexPath.Item;
            UIImage img;

            switch (indexPath.Item)
            {
                case 0:
                    img = UIImage.FromBundle("chips");
                    break;
                case 1:
                    img = UIImage.FromBundle("peanuts");
                    break;
                case 2:
                    img = UIImage.FromBundle("popcorn");
                    break;
                case 3:
                    img = UIImage.FromBundle("candy");
                    break;

                default:
                    img = new UIImage();
                    break;
            }

            cell.BackgroundImage = img;
            cell.btnTitle = title.ToString();

            return cell;

        }



        [Export("numberOfSectionsInCollectionView:")]
        public nint NumberOfSections(UICollectionView collectionView)
        {
            return 1;
        }

        [Export("collectionView:layout:minimumLineSpacingForSectionAtIndex:")]
        public nfloat GetMinimumLineSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section)
        {
            return 15;
        }
    }
}
