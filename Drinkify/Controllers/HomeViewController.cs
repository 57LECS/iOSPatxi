// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using Patxi.Models;
using UIKit;
using Firebase.Core;
using Firebase.Database;
using System.Collections.Generic;
using Drinkify.Helper;
using Firebase.Storage;
using System.Drawing;

namespace Drinkify.Storyboards
{
    public partial class HomeViewController : UIViewController, IUICollectionViewDataSource, IUICollectionViewDelegate, IUICollectionViewDelegateFlowLayout
	{
        UIEdgeInsets sectionInsets;
        NSDictionary bebidas;
        NSDictionary pedidosDic;
        int itemsPerRow = 2;
        int pedidos = 0;
        StorageReference rootRefStorage;


		public HomeViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            sectionInsets = new UIEdgeInsets(20, 20, 20, 20);
            collectionView.Delegate = this;
            collectionView.DataSource = this;
            rootRefStorage = Storage.DefaultInstance.GetRootReference();
            DatabaseReference rootNode = Database.DefaultInstance.GetRootReference();
            //nuint quantity;
            DatabaseReference order = rootNode.GetChild("0");
            order.ObserveSingleEvent(DataEventType.Value, (snapshot) => {
                //quantity = snapshot.GetValue<NSNumber>().NUIntValue;

                if (!snapshot.Exists)
                    return;

                bebidas = snapshot.GetValue<NSDictionary>();

                //AddNewQuest();
                SetUserData();

                //var totalPrice = data.ValueForKey((NSString)"TotalPrice")?.ToString();

            }, (error) => {
                Console.WriteLine(error.LocalizedDescription);
            });

            var storage = Storage.DefaultInstance;
            rootRefStorage = storage.GetRootReference();
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {

            if (segue.Identifier.Equals("profileSegue") == true)
            {

                var vc = segue.DestinationViewController as ProfileViewController;
                //TODO: Pasar la informacion del usuario para la siguiente pestana
            }
            else if (segue.Identifier.Equals("detalleOrdersSegue") == true)
            {
                var vc = segue.DestinationViewController as DetalleViewController;
                vc.isOrders = true;
                vc.isBebidas = false;
                vc.isBotanas = false;
                var btn = sender as UIButton;
                NSObject objectOut;
                pedidosDic.TryGetValue(NSObject.FromObject(btn.CurrentTitle), out objectOut);
                var dasd = objectOut as NSDictionary;
                vc.diccionary = dasd ?? pedidosDic;
            
            }

        }

        public void AddNewQuest(UIImage image)
        {
            
                /*object[] alcoholKeys = { "Nombre", "Edad", "Correo", "Password", "Sexo", "rutaImagen" };
                object[] alcoholValues = { "Andrea Hernandez De Alba", "21", "andie@correo.com", "123456789", "M", "qwerty" };
                var qs2 = NSDictionary.FromObjectsAndKeys(alcoholValues, alcoholKeys, alcoholKeys.Length);
                DatabaseReference rootNode = Database.DefaultInstance.GetRootReference();
                DatabaseReference productosNode = rootNode.GetChild("0").GetChild("Usuarios");
                DatabaseReference productoNode = productosNode.GetChildByAutoId();
                productoNode.SetValue<NSDictionary>(qs2);*/
            var profileImageRef = rootRefStorage.GetChild($"/1/profile.jpg");

            var imageMetadata = new StorageMetadata
            {
                ContentType = "image/jpeg"
            };

            image = ResizeImage(image, 170, 170);

            profileImageRef.PutData(image.AsJPEG(), imageMetadata, (metadata, error) =>
            {
                if (error != null)
                {
                    Console.WriteLine("Error");
                }
            });



           

        }


        /*public void GetImageFromUser(string id)
        {
            if (ProfileImageFetched == null)
                return;

            StorageReference profileImageRef = rootRefStorage.GetChild($"images/{id}/profile.jpg");

            profileImageRef.GetData(1 * 1024 * 1024, HandleStorageGetDataCompletion);

            void HandleStorageGetDataCompletion(NSData data, NSError error)
            {
                if (error != null)
                {
                    // Uh-oh, an error occurred!
                    return;
                }

                // Data for "images/island.jpg" is returned
                var profileImage = UIImage.LoadFromData(data);

                var okEvent = new UserGetImageEventArgs(profileImage);
                ProfileImageFetched(this, okEvent);
            }


        }*/

        public UIImage ResizeImage(UIImage sourceImage, float width, float height)
        {
            UIGraphics.BeginImageContext(new SizeF(width, height));
            sourceImage.Draw(new RectangleF(0, 0, width, height));
            var resultImage = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();
            return resultImage;
        }

        public void SetUserData(){
            DatabaseReference rootNode = Database.DefaultInstance.GetRootReference();
            //nuint quantity;
            DatabaseReference bebidas = rootNode.GetChild("0").GetChild("Usuarios").GetChild("-LFMk0i9sdCo5P6ptFYC");
            bebidas.ObserveSingleEvent(DataEventType.Value, (snapshot) => {
                if (!snapshot.Exists)
                    return;

                var personaDiccionary = snapshot.GetValue<NSDictionary>();
                Persona personita = new Persona();
                personita.Id = bebidas.Key;
                personita.Name = personaDiccionary.ValueForKey((NSString)"Nombre").ToString();
                personita.Email = personaDiccionary.ValueForKey((NSString)"Correo").ToString();
                DataPersistanceClass.persona=personita;

            }, (error) => {
                Console.WriteLine(error.LocalizedDescription);
            });

            DatabaseReference persona = rootNode.GetChild("0").GetChild("Pedidos").GetChild("-LFMk0i9sdCo5P6ptFYC");
            persona.ObserveSingleEvent(DataEventType.Value, (snapshot) => {
                if (!snapshot.Exists)
                    return;

                pedidosDic = snapshot.GetValue<NSDictionary>();
                pedidos = pedidosDic.Keys.Length;

                collectionView.ReloadData();


            }, (error) => {
                Console.WriteLine(error.LocalizedDescription);
            });

        }



        public nint GetItemsCount(UICollectionView collectionView, nint section)
        {
            return 5;
        }

        public UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath)
        {


            var length = collectionView.VisibleCells.Length;
            var title = (Alcoholes)(int)indexPath.Item;


            switch (indexPath.Item)
            {
                case 0:
                    var cellProfile = collectionView.DequeueReusableCell(CollectionHomeViewCell.Key, indexPath) as CollectionHomeViewCell;
                    cellProfile.btnTitle = "Perfil";

                    return cellProfile;

                case 1:
                    var cellOrders = collectionView.DequeueReusableCell(CollectionHomeOrdersViewCell.Key, indexPath) as CollectionHomeOrdersViewCell;

                    cellOrders.lblOrders = pedidos.ToString();
                    return cellOrders;

                default:
                    var cellPackages = collectionView.DequeueReusableCell(CollectionHomePaqueteViewCell.Key, indexPath) as CollectionHomePaqueteViewCell;

                    var img = UIImage.FromBundle("Brandy");
                    cellPackages.BackgroundImage = img;
                    cellPackages.btnTitle = "Packtempedes";
                    return cellPackages;
            }





        }

        [Export("collectionView:layout:sizeForItemAtIndexPath:")]
        public CoreGraphics.CGSize GetSizeForItem(UICollectionView collectionView, UICollectionViewLayout layout, NSIndexPath indexPath)
        {
            var paddingSpace = sectionInsets.Left * (itemsPerRow + 1);
            var availableWidth = View.Frame.Width - paddingSpace;
            var itemWidth = availableWidth / itemsPerRow;

            if (indexPath.Item >1)
            {
                availableWidth = View.Frame.Width - sectionInsets.Left;
                return new CoreGraphics.CGSize(availableWidth, itemWidth);
            }
            else{
                return new CoreGraphics.CGSize(itemWidth, itemWidth);
            }

        }

        [Export("numberOfSectionsInCollectionView:")]
        public nint NumberOfSections(UICollectionView collectionView)
        {
            return 1;
        }

        [Export("collectionView:layout:minimumLineSpacingForSectionAtIndex:")]
        public nfloat GetMinimumLineSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section)
        {
            return 15;
        }
	}
}
